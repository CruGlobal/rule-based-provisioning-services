import org.ccci.idm.obj.SsoUser
import org.ccci.idm.obj.RoleAssignment
import org.ccci.soa.obj.USEmployment
import java.util.Date

global java.util.Date now

function int graceDaysFor(String paygroup)
{
    if(paygroup=="USS" || paygroup=="INT" || paygroup=="RCE" || paygroup=="SAL" || paygroup=="HFT" || paygroup=="HPT") return 90;
    else return 30;
    
    // Leftovers should be STINTers... STN, SNO
    // What about... REM NOP ?
    // What are MFF, OFF, BEN, DIS, TFH, SNB, SSP  ?
}

function Date computeExpirationDate(Date termDate, int graceDays)
{
    Date termDatePlusGrace = new Date();
    termDatePlusGrace.setTime(termDate.getTime()+graceDays*24L*60*60*1000);
    return termDatePlusGrace;
}

function boolean pastGracePeriod(Date termDate, int graceDays, Date now) {
    if(termDate==null) return false;
    Date termDatePlusGrace = new Date();
    termDatePlusGrace.setTime(termDate.getTime()+graceDays*24L*60*60*1000);
    if(now.after(termDatePlusGrace)) return true;
    return false;
}

rule "RemoveManuallyAssignedStaffWebConsumerWhenTerminated"
    dialect "mvel"
    when
        USEmployment( emplStatus != "A"  && eval(pastGracePeriod(termDateAsDate, graceDaysFor(paygroup), now)) )
        r : RoleAssignment( roleId=="ccci:itroles:uscore:stellent:roles:StaffOnlyConsumer" )
    then
        retract( r );
end

rule "WithinGracePeriod"
    dialect "mvel"
    when
        e : USEmployment( emplStatus != "A"  && eval(!pastGracePeriod(termDateAsDate, graceDaysFor(paygroup), now)) )
    then
        insert(new RoleAssignment("ccci:itroles:uscore:stellent:roles:StaffOnlyConsumer", computeExpirationDate(e.termDateAsDate, graceDaysFor(e.paygroup))))
end

rule "EnableStaffWebConsumerWhenActive"
    dialect "mvel"
    when
        USEmployment( emplStatus == "A" )
    then
        insert(new RoleAssignment("ccci:itroles:uscore:stellent:roles:StaffOnlyConsumer"))
end
